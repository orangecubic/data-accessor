[/
    Copyright (c) 2019-2023 Ruben Perez Hidalgo (rubenperez038 at gmail dot com)
   
    Distributed under the Boost Software License, Version 1.0. (See accompanying
    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
]

[section:error_handling Error handling and available overloads]

This section describes the different error handling strategies
you may use with this library, as well as the different overloads
available for each function involving network transfers.

This library uses Boost.System error codes and exceptions,
like Asio and Beast. Some server-reported errors may include additional
diagnostics information. For example, if you issue a query 
and one of the referenced fields does not exist, the server will return
an error message indicating which was the offending field. This library
makes these diagnostics available through the following classes and
functions:

* [reflink diagnostics]: an object containing this extra diagnostic information
  about an error. [refmem diagnostics server_message] contains the server-generated error
  string, if any.
* [reflink error_with_diagnostics]: an exception that inherits from `boost::system::system_error`
  that contains a `diagnostics` object.
* [reflink throw_on_error]: a utility function to throw either `boost::system::system_error`
  or `error_with_diagnostics` given an `error_code` and a `diagnostics` object.

Every piece of functionality involving network transfers is offered in four versions:

* Synchronous with exceptions.
  When they fail, they throw a [reflink error_with_diagnostics] exception.
* Synchronous with [reflink error_code] and [reflink diagnostics].
  These functions output an `error_code` and a `diagnostics`
  object by lvalue reference to report failures.
* Asynchronous, without `diagnostics`, having the `CompletionToken` as last parameter.
  When they fail, they call the completion handler with a non-empty `error_code`.
* Asynchronous, with `diagnostics`, having a `diagnostics&` and `CompletionToken` as the last
  two parameters. When they fail, they set the `diagnostics` parameter to any server-provided
  diagnostic information, if available, and then call the completion handler with a non-empty `error_code`.
  
[heading Types of errors]

This library defines two types of errors

* Client errors indicate failures detected by Boost.MySQL. For instance, when 
  a corrupted message is received. These use the [reflink client_errc] enumeration
  and the [reflink get_client_category] error category.
* Server errors appear when the server can't execute the requested operation.
  For example, when a query contains invalid SQL or when authentication fails.
  These are further split:
  * The common server category holds error codes that are shared between MySQL and
    MariaDB. These are represented as the [reflink common_server_errc] enumeration
    and the [reflink get_common_server_category]. Since there is no common development
    between MySQL and MariaDB, the common server category is not expected to change.
  * Server-specific categories hold error codes that are specific to either MySQL
    ([reflink get_mysql_server_category]) or MariaDB ([reflink get_mariadb_server_category]).
    Both servers are in active development and keep adding new error codes. It's also possible
    to raise custom error codes from SQL. Thus, no enumeration is provided for server-specific errors.
    Instead, individual values are provided as constants in the `mysql_server_errc` and
    `mariadb_server_errc` namespaces (see headers [include_file boost/mysql/mysql_server_errc.hpp]
    and [include_file boost/mysql/mariadb_server_errc.hpp]).


[heading Security notes on diagnostics]

The error message given by [refmem diagnostics server_message] [*may contain user-provided input,
and should be treated as untrusted]. For certain errors, the MySQL server will include the offending
field names and values, which may contain arbitrary input. Please use with caution.

This message may contain non-ASCII characters. It's encoded using the connection's character set.

[endsect]
